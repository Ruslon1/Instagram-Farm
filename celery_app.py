#!/usr/bin/env python3

import os
import sys
from pathlib import Path

# –ü–æ–ª—É—á–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_ROOT = Path(__file__).parent.absolute()
print(f"üîß Project root: {PROJECT_ROOT}")

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))
    print(f"‚úÖ Added {PROJECT_ROOT} to Python path")

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è
os.environ['PYTHONPATH'] = f"{PROJECT_ROOT}:{os.environ.get('PYTHONPATH', '')}"

# –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
print(f"üìç Current working directory: {os.getcwd()}")
print(f"üìç Python executable: {sys.executable}")
print(f"üìç Python path: {sys.path[:3]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —ç–ª–µ–º–µ–Ω—Ç–∞

# –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–º–ø–æ—Ä—Ç—ã
try:
    print("üß™ Testing imports...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    modules_dir = PROJECT_ROOT / "modules"
    config_dir = PROJECT_ROOT / "config"

    print(f"üìÅ modules directory exists: {modules_dir.exists()}")
    print(f"üìÅ config directory exists: {config_dir.exists()}")

    if modules_dir.exists():
        print(f"üìÅ modules contents: {list(modules_dir.iterdir())}")

    # –ü—Ä–æ–±—É–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    from config.settings import settings

    print("‚úÖ Successfully imported config.settings")

except ImportError as e:
    print(f"‚ùå Import error: {e}")
    print("üìã Available directories:")
    for item in PROJECT_ROOT.iterdir():
        if item.is_dir():
            print(f"  üìÅ {item.name}")
    sys.exit(1)

# –¢–µ–ø–µ—Ä—å –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Celery
from celery import Celery
from celery.signals import worker_shutting_down

# –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Celery
app = Celery(
    "instagram_bot",
    broker=settings.get_celery_broker_url(),
    backend=settings.get_celery_result_backend()
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Celery
app.conf.update(
    worker_pool='solo',
    worker_concurrency=1,
    task_serializer='json',
    result_serializer='json',
    accept_content=['json'],
    timezone='UTC',
    enable_utc=True,
    task_acks_late=False,
    broker_connection_retry_on_startup=True,
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥—É–ª–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
    include=[
        'modules.tasks',
    ],
    imports=[
        'modules.tasks',
    ]
)

# –ü—Ä–æ–±—É–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –≤—Ä—É—á–Ω—É—é
try:
    print("üîç Trying to import modules.tasks...")
    import modules.tasks

    print("‚úÖ modules.tasks imported successfully")

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∑–∞–¥–∞—á
    app.autodiscover_tasks(['modules'])
    print("‚úÖ Tasks autodiscovered")

except ImportError as e:
    print(f"‚ùå Failed to import modules.tasks: {e}")
    print("üîß Available modules:")
    try:
        import modules

        print(f"   modules.__file__: {modules.__file__}")
        import pkgutil

        for importer, modname, ispkg in pkgutil.iter_modules(modules.__path__):
            print(f"   üì¶ {modname}")
    except Exception as ex:
        print(f"   ‚ùå Can't explore modules: {ex}")

print("üéØ Celery app configured successfully")

if __name__ == '__main__':
    print("üöÄ Starting Celery worker...")
    app.start()